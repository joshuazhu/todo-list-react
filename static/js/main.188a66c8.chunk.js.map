{"version":3,"sources":["context.js","components/TodoList.js","reducer.js","components/TodoForm.js","serviceWorker.js","index.js","App.js"],"names":["TodosContext","React","createContext","todos","id","text","complete","TodoList","useContext","state","dispatch","CenteredTitle","length","filter","x","size","bordered","dataSource","renderItem","item","Item","onDoubleClick","type","payload","actions","key","onClick","theme","Meta","title","StyledContent","styled","h1","span","props","todoReducer","action","toggledTodos","map","t","filteredTodos","TodoForm","Form","create","name","form","validateFields","getFieldDecorator","getFieldValue","CenteredContainer","StyledForm","onSubmit","e","preventDefault","err","uuid","v4","rules","required","message","placeholder","div","Boolean","window","location","hostname","match","ReactDOM","render","initialState","useReducer","Provider","value","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.188a66c8.chunk.js","sourcesContent":["import React from 'react';\n\nconst TodosContext = React.createContext({\n  todos: [\n    { id: 1, text: \"Eat breakfast\", complete: false },\n    { id: 2, text: \"Do laundry\", complete: false },\n    { id: 3, text: \"Finish project\", complete: true },\n  ]\n})\n\nexport { TodosContext };","import React, { useContext } from 'react';\nimport { List, Icon } from 'antd';\nimport styled from 'styled-components';\nimport { TodosContext } from '../context';\n\nconst TodoList = () => {\n  const { state, dispatch } = useContext(TodosContext);\n\n  return (\n    <div>\n      <CenteredTitle>{state.todos.length > 0 ? `${state.todos.filter(x => !x.complete).length} Todos` : 'Nothing to do'}</CenteredTitle>\n      <List\n        size=\"large\"\n        bordered\n        dataSource={state.todos}\n        renderItem={item =>\n          <List.Item\n            onDoubleClick={() => dispatch({ type: \"TOGGLE_TODO\", payload: item })}\n            actions={[\n              <a key=\"list-loadmore-edit\" onClick={() => dispatch({ type: \"REMOVE_TODO\", payload: item })}>\n                <Icon type=\"delete\" theme=\"filled\" />\n              </a>\n            ]}\n          >\n            <List.Item.Meta\n              title={<StyledContent complete={item.complete}>{item.text}</StyledContent>}\n            />\n          </List.Item>\n        }\n      />\n    </div>\n  )\n}\n\nconst CenteredTitle = styled.h1`\n  margin: 0 auto;\n  text-align: center;\n`;\n\nconst StyledContent = styled.span`\n  text-decoration: ${props => props.complete ? 'line-through' : 'none'}\n`;\n\nexport { TodoList }","const todoReducer = (state, action) => {\n  switch (action.type) {\n    case \"TOGGLE_TODO\":\n      const toggledTodos = state.todos.map(t => t.id === action.payload.id ?\n        {\n          ...action.payload,\n          complete: !action.payload.complete\n        } : t);\n\n      return {\n        ...state,\n        todos: toggledTodos\n      }\n\n    case \"REMOVE_TODO\":\n      const filteredTodos = state.todos.filter(t => t.id !== action.payload.id);\n\n      return {\n        ...state,\n        todos: filteredTodos\n      }\n\n      case \"ADD_TODO\":\n        return {\n          ...state,\n          todos: [\n            ...state.todos,\n            action.payload\n          ]\n        }\n    default:\n      return state\n  }\n}\n\nexport { todoReducer };","import React, { useContext } from 'react';\nimport { Form, Input } from 'antd';\nimport styled from 'styled-components';\nimport uuid from 'uuid';\nimport { TodosContext } from '../context';\n\n\nconst TodoInput = ({ form }) => {\n  const { dispatch } = useContext(TodosContext);\n  const {\n    validateFields,\n    getFieldDecorator,\n    getFieldValue\n  } = form;\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    validateFields((err) => {\n      if(!err) {\n        dispatch({\n          type: \"ADD_TODO\",\n          payload: {\n            id: uuid.v4(),\n            text: getFieldValue('todoText'),\n            complete: false\n          }\n        })\n      }\n    });\n\n  }\n\n  return (\n    <CenteredContainer>\n      <StyledForm onSubmit={handleSubmit}>\n        <Form.Item>\n          {getFieldDecorator('todoText', {\n            rules: [{ required: true, message: 'Please input your new todo text' }],\n          })(\n            <Input placeholder=\"New Todo\" />)}\n        </Form.Item>\n      </StyledForm>\n    </CenteredContainer>\n  )\n}\n\nconst TodoForm = Form.create({ name: 'TodoInput' })(TodoInput);\n\nconst CenteredContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`\nconst StyledForm = styled(Form)`\n  width: 20%;\n  margin: 0 auto;\n`;\nexport { TodoForm };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n  <App />\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","import React, { useContext, useReducer } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodosContext } from './context';\nimport { todoReducer } from './reducer';\nimport { TodoForm } from './components/TodoForm';\n\n\nexport default function App() {\n  const initialState = useContext(TodosContext);\n  const [state, dispatch] = useReducer(todoReducer, initialState);\n\n  return (\n    <TodosContext.Provider value={{ state, dispatch }}>\n      <TodoForm />\n      <TodoList />\n    </TodosContext.Provider>\n  )\n}"],"sourceRoot":""}